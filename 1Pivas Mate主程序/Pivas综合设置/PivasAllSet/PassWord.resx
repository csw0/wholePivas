<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAgAAAAYAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAA
        AAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAA
        AAgAAAAEAAAAAAAAAAIAAAAKAAAAFgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAAAB4AAAAeAAAAHgAA
        AB4AAAAeAAAAGgAAAA4AAAAEAAAABABHVDIAaHnPAHyO/wB/kv8AgJL/AICS/wCAkv8AgJL/AICS/wCA
        kv8AgJL/AICS/wCAkv8AgJL/AICS/wCAkv8AgJL/AICS/wCAkv8AgJL/AICS/wCAkv8AgJL/AICS/wCA
        kv8AgJL/AICS/wB+kP8AcIHhAFlobgAAAAYAAAAEAGZ5lT58hP9XYWP/WVlZ/1ZWVv9UVFT/UlJS/1BQ
        UP9OTk7/TExM/0pKSv9ISEj/R0dH/0VFRf9DQ0P/QkJC/0BAQP8+Pj7/PT09/zs7O/86Ojr/OTk5/zg4
        OP82Njb/NTU1/zQ0NP80NDT/NDQ0/yVgZ/8AfZLTAAAABAAAAAIAho96Wmlq/wfZ8v8A5P//AOT//wDk
        //8A5P//AOX//wDl//8A5f//AOX//wDl//8A5f//AOX//wDl//8A5f//AOX//wDl//8A5f//AOX//wDl
        //8A5f//AOX//wDl//8A5f//AOX//wDl//8PsML/KFhe/wCIoIcAAAACAAAAAABschZBhon5LK2z/wDl
        //8A5P//AOT//wDk//8A5P//AOT//wDl//8A5f//AOX//wDl//8C2vL/B77T/wW80f8B1u7/AOX//wDl
        //8A5f//AOX//wDl//8A5f//AOX//wDl//8A5f//AOX//yZnbv8Ri5ztAFppEAAAAAAAAAAAAAAAAB2O
        k4NkaWn/Bujx/wDy/f8A5P//AOT//wDk//8A5P//AOT//wDk//8A5f//JHV+/y8yMv8nJyf/Hx8f/xgY
        GP8MVF3/AOL8/wDl//8A5f//AOX//wDl//8A5f//AOX//wDl//8ZlqX/KGNr/wCKomYAAAAAAAAAAAAA
        AAAAAAAAAEZHBj2Nj+s4pKf/APT9/wDz/f8A7f7/AOT//wDk//8A5P//AOT//wDk//8iiZT/NTU1/y0t
        Lf8lJSX/HR0d/w1pc/8A5f//AOX//wDl//8A5f//AOX//wDl//8A5f//BNv0/zo/P/8KlqzZAD1HBgAA
        AAAAAAAAAAAAAAAAAAAAAAAAEo+QSmB2d/8Z09f/APX9/wD0/f8A8v3/AOX//wDk//8A5P//AOT//wXZ
        8v83R0n/MzMz/yoqKv8gKyz/A9Dn/wDl//8A5f//AOX//wDl//8A5f//AOX//wDl//8iiZX/IX2J/wCD
        mkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMpWVyUeZmv8A+P3/APb9/wD1/f8A8/3/APL9/wDk
        //8A5P//AOT//xK4zP8PuMz/DLjM/wytwP8A5f//AOX//wDl//8A5f//AOX//wDl//8A5f//EL/T/ztR
        VP8Fl6+vAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAhYQiV4iI/yy/wP8A+f3/APj9/wD2
        /f8A9P3/APP9/wDt/v8A5P//AeL9/x2Yp/8ZkqD/AeD6/wDl//8A5f//AOX//wDl//8A5f//AOX//wDl
        //8ufIX/GY+g+QB1iR4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIjm5qjb3V1/wfx
        8v8A+vz/APj9/wD3/f8A9f3/APT9/wDy/f8drLz/RUVF/zw8PP8Una3/AOT//wDk//8A5f//AOX//wDl
        //8A5f//Hqe2/zlpb/8Aj6d+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABw
        bxBCnJvzP6+u/wD8/P8L7/D/c3Nz/2xsbP9kZGT/Ir3C/xnEy/9LS0v/QkJC/xKuwP8Rpbb/KCgo/yAg
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABxISAZluLfbkZ6e/46wsP9YwcDTHEhIBgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyenTZZxcTxWcbF9zydnDIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEOvrhJDsK8SAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////AAAADgAAAAcAAAAHAAAADwAAAB+AAAAfwAAAP8AAAD/gA
        AB/4AAA//AAAP/4AAH/+AAB//wAA//8AAP//gAH//4AD///AA///4Af//+AH///wD///8A////gf///8
        P////D////5///////////////////////8=
</value>
  </data>
</root>